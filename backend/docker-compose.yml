version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: aios_postgres
    environment:
      POSTGRES_DB: aios_db
      POSTGRES_USER: aios
      POSTGRES_PASSWORD: aios_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - aios_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U aios -d aios_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # TimescaleDB Extension (if needed)
  timescaledb:
    image: timescale/timescaledb:latest-pg15
    container_name: aios_timescaledb
    environment:
      POSTGRES_DB: aios_timeseries
      POSTGRES_USER: aios
      POSTGRES_PASSWORD: aios_password
    volumes:
      - timescale_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - aios_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U aios -d aios_timeseries"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache and Message Broker
  redis:
    image: redis:7-alpine
    container_name: aios_redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - aios_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # FastAPI Backend Application
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: aios_backend
    environment:
      - POSTGRES_SERVER=postgres
      - POSTGRES_USER=aios
      - POSTGRES_PASSWORD=aios_password
      - POSTGRES_DB=aios_db
      - POSTGRES_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - SECRET_KEY=your-super-secret-key-change-in-production
      - ACCESS_TOKEN_EXPIRE_MINUTES=60
    volumes:
      - ./app:/app/app
      - ./models:/app/models
      - ./logs:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - aios_network
    restart: unless-stopped

  # Celery Worker for Computer Vision Processing
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: aios_celery_worker
    command: celery -A app.workers.tasks worker --loglevel=info --concurrency=2
    environment:
      - POSTGRES_SERVER=postgres
      - POSTGRES_USER=aios
      - POSTGRES_PASSWORD=aios_password
      - POSTGRES_DB=aios_db
      - POSTGRES_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - SECRET_KEY=your-super-secret-key-change-in-production
    volumes:
      - ./app:/app/app
      - ./models:/app/models
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - aios_network
    restart: unless-stopped

  # Celery Beat for Scheduled Tasks
  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: aios_celery_beat
    command: celery -A app.workers.tasks beat --loglevel=info
    environment:
      - POSTGRES_SERVER=postgres
      - POSTGRES_USER=aios
      - POSTGRES_PASSWORD=aios_password
      - POSTGRES_DB=aios_db
      - POSTGRES_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - SECRET_KEY=your-super-secret-key-change-in-production
    volumes:
      - ./app:/app/app
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - aios_network
    restart: unless-stopped

  # Flower for Celery Monitoring
  flower:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: aios_flower
    command: celery -A app.workers.tasks flower --port=5555
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
    ports:
      - "5555:5555"
    depends_on:
      - redis
    networks:
      - aios_network
    restart: unless-stopped

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: aios_nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
    networks:
      - aios_network
    restart: unless-stopped

volumes:
  postgres_data:
  timescale_data:
  redis_data:

networks:
  aios_network:
    driver: bridge
